services:
  db:
    image: postgres:14
    env_file: .env.db
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./server/ingestion-service/migrations:/docker-entrypoint-initdb.d

  api:
    build:
      context: ./server
      dockerfile: dockerfile
    env_file: ./server/.env.dev
    volumes:
      - ./server/src:/usr/src/app/src
      - ./server/package.json:/usr/src/app/package.json
      - ./server/package-lock.json:/usr/src/app/package-lock.json
      - ./server/tsconfig.json:/usr/src/app/tsconfig.json
    ports:
      - "3000:3000"
    depends_on:
      - db

  ftp:
    build:
      context: ./simple-ftp-server
      dockerfile: Dockerfile
    platform: linux/amd64 # or remove if youâ€™re on amd64
    environment:
      - PUBLICHOST=localhost
      - FTP_USER_NAME=foo
      - FTP_USER_PASS=pass
      - FTP_USER_HOME=/home/foo/upload
      - FTP_USER_UID=1001
      - FTP_USER_GID=1001
      - ADDED_FLAGS=-d -d
    volumes:
      - ./local_data:/home/foo/upload:rw
    ports:
      - "21:21"
      - "30000-30009:30000-30009"

  watcher:
    build:
      context: ./server/scripts
      dockerfile: dockerfile
    volumes:
      - ./server/scripts:/usr/src/app
      - ./local_data:/home/foo/upload
    depends_on:
      - api
      - ftp
    command: ["bash", "inotify-listener.sh", "/home/foo/upload", "http://api:3000"]

  frontend:
    build:
      context: ./frontend
      dockerfile: dockerfile
    env_file: ./frontend/.env.frontend
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3001:5173"
    depends_on:
      - api

volumes:
  db-data:
